{"name":"Gpiocrust","tagline":"Simple object-oriented wrapper around RPi.GPIO","body":"gpiocrust\r\n=========\r\n\r\nA concise, pythonic wrapper around the Raspberry Pi’s `RPi.GPIO`_\r\nlibrary. An encrusting, if you will.\r\n\r\nWith (almost silent) fallback to mock objects, you can prototype pin I/O locally on your favorite computer, even when your Pi is on the other side of town (see *Mock API* for more details).\r\n\r\n*gpiocrust* is fully compatible with Python 2 and Python 3.\r\n\r\nIn a nutshell\r\n-------------\r\n\r\nDownload from PyPI with `easy_install` or `pip`.\r\n\r\n```bash\r\npip install gpiocrust\r\n```\r\n\r\nIn a *.py* file, import the library and start setting pin values. It's easy! Here's a bare-bones example that will turn on GPIO pin 15:\r\n\r\n```python\r\nfrom gpiocrust import Header, OutputPin\r\n\r\nwith Header() as header:\r\n    pin = OutputPin(15, value=0)\r\n    pin.value = 1\r\n```\r\n\r\nAPI\r\n---\r\n\r\n*gpiocrust* provides four classes to help give GPIO pin manipulation a more object-oriented feel. They are:\r\n\r\n- `Header`\r\n- `OutputPin`\r\n- `PWMOutputPin`\r\n- `InputPin`\r\n\r\n\r\n**Header**\r\n\r\nThe `Header` class just wraps the GPIO setup and teardown methods.\r\nMost importantly, it ensures that `GPIO.cleanup()` is called. For\r\nexample:\r\n\r\n```python\r\nfrom gpiocrust import Header\r\n\r\nwith Header() as header:\r\n    # Application logic goes here\r\n    pass\r\n\r\n# All cleaned up now.\r\n```\r\n\r\n**OutputPin**\r\n\r\nThe `OutputPin` class controls a single GPIO pin for output. Set its\r\nvalue to `True` (`1`) or `False` (`0`). That’s all there is to\r\nit!\r\n\r\n```python\r\nfrom gpiocrust import Header, OutputPin\r\n\r\nwith Header() as header:\r\n    shiny_led = OutputPin(11)\r\n    shiny_led.value = True\r\n    ...\r\n```\r\n\r\n`value` defaults to `False`, but can be set with a keyword argument.\r\n\r\n```python\r\nshiny_led = OutputPin(11, value=True)\r\n```\r\n\r\n**PWMOutputPin**\r\n\r\nThe `PWMOutputPin` class controls a single GPIO pin for output, but\r\nallows for variable `value`s via software pulse width modulation.\r\n\r\n```python\r\nfrom gpiocrust import Header, PWMOutputPin\r\n\r\nwith Header() as header:\r\n    soft_led = PWMOutputPin(11)\r\n    soft_led.value = 0.25\r\n    ...\r\n```\r\n\r\nYou can set the frequency (Hz) via the `frequency` property. For\r\nexample:\r\n\r\n```python\r\nfrom gpiocrust import Header, PWMOutputPin\r\n\r\nwith Header() as header:\r\n    soft_led = PWMOutputPin(11, frequency=100)\r\n    soft_led.frequency = 50\r\n```\r\n\r\n**NOTE:** the RPi.GPIO implementation uses duty cycle values from `0`\r\nto `100`. To be consistent with `OutputPin`, `PWMOutputPin` uses\r\ndecimal values `0.0` to `1.0`.\r\n\r\n**InputPin**\r\n\r\nThe `InputPin` class controls a single GPIO pin for input. You can\r\nwatch for edge events using a `callback` argument or via the\r\n`@change` decorator. For now, `InputPin` only supports watching\r\n`GPIO.BOTH` (rising *and* falling) events.\r\n\r\n```python\r\nfrom gpiocrust import Header, InputPin\r\n\r\ndef alert_president(value):\r\n    pass\r\n\r\nwith Header() as header:\r\n    the_red_button = InputPin(11, callback=alert_president)\r\n```\r\n\r\nIt’s even cleaner with the `@change` decorator.\r\n\r\n```python\r\nfrom gpiocrust import Header, InputPin\r\n\r\nwith Header() as header:\r\n    the_red_button = InputPin(11, value=0)\r\n\r\n    @the_red_button.change\r\n    def alert_president(value):\r\n        pass\r\n```\r\n\r\nMock API\r\n--------\r\n\r\nMock classes are included that mimic the native GPIO functionality. The\r\nlibrary falls back to mock objects when the `RPi.GPIO` package cannot\r\nbe loaded. This allows one to code the general I/O flow of an\r\napplication in development environments where running code on a physical\r\nRaspberry Pi is inconvenient or impossible (i.e, the computer you're \r\nreading this on).\r\n\r\nFallback is automatic, so your import statements will look just as\r\nbefore.\r\n\r\nOutputPin example\r\n-----------------\r\n\r\n```python\r\nimport time\r\nfrom gpiocrust import Header, OutputPin, PWMOutputPin\r\n\r\nwith Header() as header:\r\n    pin11 = OutputPin(11)\r\n    pin15 = PWMOutputPin(15, frequency=100, value=0)\r\n\r\n    try:\r\n        while 1:\r\n            # Going up\r\n            pin11.value = True\r\n\r\n          for i in range(100):\r\n              pin15.value = i / 100.0\r\n              time.sleep(0.01)\r\n\r\n          time.sleep(0.5)\r\n\r\n          # Going down\r\n          pin11.value = False\r\n          \r\n          for i in range(100):\r\n              pin15.value = (100 - i) / 100.0\r\n              time.sleep(0.01)\r\n          \r\n          time.sleep(0.5)\r\n      except KeyboardInterrupt:\r\n          pass\r\n```\r\n","google":"UA-70233462-1","note":"Don't delete this file! It's used internally to help with page regeneration."}